.TH "/home/wery_a/rendu/CPP/cpp_arcade/library/sdl2/include/SDL_rwops.h" 3 "Jeudi 31 Mars 2016" "Version 1" "Arcade" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/wery_a/rendu/CPP/cpp_arcade/library/sdl2/include/SDL_rwops.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'SDL_stdinc\&.h'\fP
.br
\fC#include 'SDL_error\&.h'\fP
.br
\fC#include 'begin_code\&.h'\fP
.br
\fC#include 'close_code\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBSDL_RWops\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSDL_RWOPS_UNKNOWN\fP   0   /* Unknown \fBstream\fP \fBtype\fP */"
.br
.ti -1c
.RI "#define \fBSDL_RWOPS_WINFILE\fP   1   /* Win32 file */"
.br
.ti -1c
.RI "#define \fBSDL_RWOPS_STDFILE\fP   2   /* Stdio file */"
.br
.ti -1c
.RI "#define \fBSDL_RWOPS_JNIFILE\fP   3   /* Android asset */"
.br
.ti -1c
.RI "#define \fBSDL_RWOPS_MEMORY\fP   4   /* Memory \fBstream\fP */"
.br
.ti -1c
.RI "#define \fBSDL_RWOPS_MEMORY_RO\fP   5   /* Read\-Only memory \fBstream\fP */"
.br
.ti -1c
.RI "#define \fBRW_SEEK_SET\fP   0"
.br
.ti -1c
.RI "#define \fBRW_SEEK_CUR\fP   1"
.br
.ti -1c
.RI "#define \fBRW_SEEK_END\fP   2"
.br
.in -1c
.PP
.RI "\fBRead/write macros\fP"
.br
Macros to easily read and write from an \fBSDL_RWops\fP structure\&. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDL_RWsize\fP(ctx)                 (ctx)\->\fBsize\fP(ctx)"
.br
.ti -1c
.RI "#define \fBSDL_RWseek\fP(ctx,  \fBoffset\fP,  whence)   (ctx)\->seek(ctx, \fBoffset\fP, whence)"
.br
.ti -1c
.RI "#define \fBSDL_RWtell\fP(ctx)                 (ctx)\->seek(ctx, 0, \fBRW_SEEK_CUR\fP)"
.br
.ti -1c
.RI "#define \fBSDL_RWread\fP(ctx,  ptr,  \fBsize\fP,  \fBn\fP)     (ctx)\->read(ctx, ptr, \fBsize\fP, \fBn\fP)"
.br
.ti -1c
.RI "#define \fBSDL_RWwrite\fP(ctx,  ptr,  \fBsize\fP,  \fBn\fP)   (ctx)\->write(ctx, ptr, \fBsize\fP, \fBn\fP)"
.br
.ti -1c
.RI "#define \fBSDL_RWclose\fP(ctx)               (ctx)\->close(ctx)"
.br
.in -1c
.in -1c
.SS "Définitions de type"

.in +1c
.ti -1c
.RI "typedef struct \fBSDL_RWops\fP \fBSDL_RWops\fP"
.br
.in -1c
.SS "Fonctions"

.in +1c
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_RWops\fP *\fBSDLCALL\fP \fBSDL_AllocRW\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP \fBSDL_FreeRW\fP (\fBSDL_RWops\fP *area)"
.br
.in -1c
.PP
.RI "\fBRWFrom functions\fP"
.br
Functions to create \fBSDL_RWops\fP structures from various data streams\&. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_RWops\fP *\fBSDLCALL\fP \fBSDL_RWFromFile\fP (\fBconst\fP char *file, \fBconst\fP char *\fBmode\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_RWops\fP *\fBSDLCALL\fP \fBSDL_RWFromFP\fP (FILE *fp, \fBSDL_bool\fP autoclose)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_RWops\fP *\fBSDLCALL\fP \fBSDL_RWFromMem\fP (\fBvoid\fP *mem, \fBint\fP \fBsize\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_RWops\fP *\fBSDLCALL\fP \fBSDL_RWFromConstMem\fP (\fBconst\fP \fBvoid\fP *mem, \fBint\fP \fBsize\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRead endian functions\fP"
.br
Read an item of the specified endianness and return in native format\&. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "\fBDECLSPEC\fP \fBUint8\fP \fBSDLCALL\fP \fBSDL_ReadU8\fP (\fBSDL_RWops\fP *\fBsrc\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBUint16\fP \fBSDLCALL\fP \fBSDL_ReadLE16\fP (\fBSDL_RWops\fP *\fBsrc\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBUint16\fP \fBSDLCALL\fP \fBSDL_ReadBE16\fP (\fBSDL_RWops\fP *\fBsrc\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBUint32\fP \fBSDLCALL\fP \fBSDL_ReadLE32\fP (\fBSDL_RWops\fP *\fBsrc\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBUint32\fP \fBSDLCALL\fP \fBSDL_ReadBE32\fP (\fBSDL_RWops\fP *\fBsrc\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBUint64\fP \fBSDLCALL\fP \fBSDL_ReadLE64\fP (\fBSDL_RWops\fP *\fBsrc\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP \fBUint64\fP \fBSDLCALL\fP \fBSDL_ReadBE64\fP (\fBSDL_RWops\fP *\fBsrc\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBWrite endian functions\fP"
.br
Write an item of native format to the specified endianness\&. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "\fBDECLSPEC\fP size_t \fBSDLCALL\fP \fBSDL_WriteU8\fP (\fBSDL_RWops\fP *\fBdst\fP, \fBUint8\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP size_t \fBSDLCALL\fP \fBSDL_WriteLE16\fP (\fBSDL_RWops\fP *\fBdst\fP, \fBUint16\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP size_t \fBSDLCALL\fP \fBSDL_WriteBE16\fP (\fBSDL_RWops\fP *\fBdst\fP, \fBUint16\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP size_t \fBSDLCALL\fP \fBSDL_WriteLE32\fP (\fBSDL_RWops\fP *\fBdst\fP, \fBUint32\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP size_t \fBSDLCALL\fP \fBSDL_WriteBE32\fP (\fBSDL_RWops\fP *\fBdst\fP, \fBUint32\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP size_t \fBSDLCALL\fP \fBSDL_WriteLE64\fP (\fBSDL_RWops\fP *\fBdst\fP, \fBUint64\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBDECLSPEC\fP size_t \fBSDLCALL\fP \fBSDL_WriteBE64\fP (\fBSDL_RWops\fP *\fBdst\fP, \fBUint64\fP \fBvalue\fP)"
.br
.in -1c
.in -1c
.SH "Description détaillée"
.PP 
This file provides a general interface for SDL to read and write data streams\&. It can easily be extended to files, memory, etc\&. 
.PP
Définition dans le fichier \fBSDL_rwops\&.h\fP\&.
.SH "Documentation des macros"
.PP 
.SS "#define RW_SEEK_CUR   1"
Seek relative to current read point 
.PP
Définition à la ligne 175 du fichier SDL_rwops\&.h\&.
.SS "#define RW_SEEK_END   2"
Seek relative to the end of data 
.PP
Définition à la ligne 176 du fichier SDL_rwops\&.h\&.
.SS "#define RW_SEEK_SET   0"
Seek from the beginning of data 
.PP
Définition à la ligne 174 du fichier SDL_rwops\&.h\&.
.SS "#define SDL_RWclose(ctx)   (ctx)\->close(ctx)"

.PP
Définition à la ligne 189 du fichier SDL_rwops\&.h\&.
.SS "#define SDL_RWOPS_JNIFILE   3   /* Android asset */"

.PP
Définition à la ligne 45 du fichier SDL_rwops\&.h\&.
.SS "#define SDL_RWOPS_MEMORY   4   /* Memory \fBstream\fP */"

.PP
Définition à la ligne 46 du fichier SDL_rwops\&.h\&.
.SS "#define SDL_RWOPS_MEMORY_RO   5   /* Read\-Only memory \fBstream\fP */"

.PP
Définition à la ligne 47 du fichier SDL_rwops\&.h\&.
.SS "#define SDL_RWOPS_STDFILE   2   /* Stdio file */"

.PP
Définition à la ligne 44 du fichier SDL_rwops\&.h\&.
.SS "#define SDL_RWOPS_UNKNOWN   0   /* Unknown \fBstream\fP \fBtype\fP */"

.PP
Définition à la ligne 42 du fichier SDL_rwops\&.h\&.
.SS "#define SDL_RWOPS_WINFILE   1   /* Win32 file */"

.PP
Définition à la ligne 43 du fichier SDL_rwops\&.h\&.
.SS "#define SDL_RWread(ctx, ptr, \fBsize\fP, \fBn\fP)   (ctx)\->read(ctx, ptr, \fBsize\fP, \fBn\fP)"

.PP
Définition à la ligne 187 du fichier SDL_rwops\&.h\&.
.SS "#define SDL_RWseek(ctx, \fBoffset\fP, whence)   (ctx)\->seek(ctx, \fBoffset\fP, whence)"

.PP
Définition à la ligne 185 du fichier SDL_rwops\&.h\&.
.SS "#define SDL_RWsize(ctx)   (ctx)\->\fBsize\fP(ctx)"

.PP
Définition à la ligne 184 du fichier SDL_rwops\&.h\&.
.SS "#define SDL_RWtell(ctx)   (ctx)\->seek(ctx, 0, \fBRW_SEEK_CUR\fP)"

.PP
Définition à la ligne 186 du fichier SDL_rwops\&.h\&.
.SS "#define SDL_RWwrite(ctx, ptr, \fBsize\fP, \fBn\fP)   (ctx)\->write(ctx, ptr, \fBsize\fP, \fBn\fP)"

.PP
Définition à la ligne 188 du fichier SDL_rwops\&.h\&.
.SH "Documentation des définitions de type"
.PP 
.SS "typedef struct \fBSDL_RWops\fP  \fBSDL_RWops\fP"
This is the read/write operation structure -- very basic\&. 
.SH "Documentation des fonctions"
.PP 
.SS "\fBDECLSPEC\fP \fBSDL_RWops\fP* \fBSDLCALL\fP SDL_AllocRW (\fBvoid\fP)"

.SS "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP SDL_FreeRW (\fBSDL_RWops\fP * area)"

.SS "\fBDECLSPEC\fP \fBUint16\fP \fBSDLCALL\fP SDL_ReadBE16 (\fBSDL_RWops\fP * src)"

.SS "\fBDECLSPEC\fP \fBUint32\fP \fBSDLCALL\fP SDL_ReadBE32 (\fBSDL_RWops\fP * src)"

.SS "\fBDECLSPEC\fP \fBUint64\fP \fBSDLCALL\fP SDL_ReadBE64 (\fBSDL_RWops\fP * src)"

.SS "\fBDECLSPEC\fP \fBUint16\fP \fBSDLCALL\fP SDL_ReadLE16 (\fBSDL_RWops\fP * src)"

.SS "\fBDECLSPEC\fP \fBUint32\fP \fBSDLCALL\fP SDL_ReadLE32 (\fBSDL_RWops\fP * src)"

.SS "\fBDECLSPEC\fP \fBUint64\fP \fBSDLCALL\fP SDL_ReadLE64 (\fBSDL_RWops\fP * src)"

.SS "\fBDECLSPEC\fP \fBUint8\fP \fBSDLCALL\fP SDL_ReadU8 (\fBSDL_RWops\fP * src)"

.SS "\fBDECLSPEC\fP \fBSDL_RWops\fP* \fBSDLCALL\fP SDL_RWFromConstMem (\fBconst\fP \fBvoid\fP * mem, \fBint\fP size)"

.SS "\fBDECLSPEC\fP \fBSDL_RWops\fP* \fBSDLCALL\fP SDL_RWFromFile (\fBconst\fP char * file, \fBconst\fP char * mode)"

.SS "\fBDECLSPEC\fP \fBSDL_RWops\fP* \fBSDLCALL\fP SDL_RWFromFP (FILE * fp, \fBSDL_bool\fP autoclose)"

.SS "\fBDECLSPEC\fP \fBSDL_RWops\fP* \fBSDLCALL\fP SDL_RWFromMem (\fBvoid\fP * mem, \fBint\fP size)"

.SS "\fBDECLSPEC\fP size_t \fBSDLCALL\fP SDL_WriteBE16 (\fBSDL_RWops\fP * dst, \fBUint16\fP value)"

.SS "\fBDECLSPEC\fP size_t \fBSDLCALL\fP SDL_WriteBE32 (\fBSDL_RWops\fP * dst, \fBUint32\fP value)"

.SS "\fBDECLSPEC\fP size_t \fBSDLCALL\fP SDL_WriteBE64 (\fBSDL_RWops\fP * dst, \fBUint64\fP value)"

.SS "\fBDECLSPEC\fP size_t \fBSDLCALL\fP SDL_WriteLE16 (\fBSDL_RWops\fP * dst, \fBUint16\fP value)"

.SS "\fBDECLSPEC\fP size_t \fBSDLCALL\fP SDL_WriteLE32 (\fBSDL_RWops\fP * dst, \fBUint32\fP value)"

.SS "\fBDECLSPEC\fP size_t \fBSDLCALL\fP SDL_WriteLE64 (\fBSDL_RWops\fP * dst, \fBUint64\fP value)"

.SS "\fBDECLSPEC\fP size_t \fBSDLCALL\fP SDL_WriteU8 (\fBSDL_RWops\fP * dst, \fBUint8\fP value)"

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour Arcade à partir du code source\&.
