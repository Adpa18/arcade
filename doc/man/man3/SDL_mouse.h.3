.TH "/home/wery_a/rendu/CPP/cpp_arcade/library/sdl2/include/SDL_mouse.h" 3 "Mercredi 30 Mars 2016" "Version 1" "Arcade" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/wery_a/rendu/CPP/cpp_arcade/library/sdl2/include/SDL_mouse.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'SDL_stdinc\&.h'\fP
.br
\fC#include 'SDL_error\&.h'\fP
.br
\fC#include 'SDL_video\&.h'\fP
.br
\fC#include 'begin_code\&.h'\fP
.br
\fC#include 'close_code\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSDL_BUTTON\fP(X)             (1 << ((X)\-1))"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_LEFT\fP   1"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_MIDDLE\fP   2"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_RIGHT\fP   3"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_X1\fP   4"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_X2\fP   5"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_LMASK\fP   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_LEFT\fP)"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_MMASK\fP   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_MIDDLE\fP)"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_RMASK\fP   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_RIGHT\fP)"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_X1MASK\fP   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_X1\fP)"
.br
.ti -1c
.RI "#define \fBSDL_BUTTON_X2MASK\fP   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_X2\fP)"
.br
.in -1c
.SS "Définitions de type"

.in +1c
.ti -1c
.RI "typedef struct \fBSDL_Cursor\fP \fBSDL_Cursor\fP"
.br
.in -1c
.SS "Énumérations"

.in +1c
.ti -1c
.RI "enum \fBSDL_SystemCursor\fP { \fBSDL_SYSTEM_CURSOR_ARROW\fP, \fBSDL_SYSTEM_CURSOR_IBEAM\fP, \fBSDL_SYSTEM_CURSOR_WAIT\fP, \fBSDL_SYSTEM_CURSOR_CROSSHAIR\fP, \fBSDL_SYSTEM_CURSOR_WAITARROW\fP, \fBSDL_SYSTEM_CURSOR_SIZENWSE\fP, \fBSDL_SYSTEM_CURSOR_SIZENESW\fP, \fBSDL_SYSTEM_CURSOR_SIZEWE\fP, \fBSDL_SYSTEM_CURSOR_SIZENS\fP, \fBSDL_SYSTEM_CURSOR_SIZEALL\fP, \fBSDL_SYSTEM_CURSOR_NO\fP, \fBSDL_SYSTEM_CURSOR_HAND\fP, \fBSDL_NUM_SYSTEM_CURSORS\fP }
.RI "\fICursor types for SDL_CreateSystemCursor\&. \fP""
.br
.ti -1c
.RI "enum \fBSDL_MouseWheelDirection\fP { \fBSDL_MOUSEWHEEL_NORMAL\fP, \fBSDL_MOUSEWHEEL_FLIPPED\fP }
.RI "\fIScroll direction types for the Scroll event\&. \fP""
.br
.in -1c
.SS "Fonctions"

.in +1c
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Window\fP *\fBSDLCALL\fP \fBSDL_GetMouseFocus\fP (\fBvoid\fP)"
.br
.RI "\fIGet the window which currently has mouse focus\&. \fP"
.ti -1c
.RI "\fBDECLSPEC\fP \fBUint32\fP \fBSDLCALL\fP \fBSDL_GetMouseState\fP (\fBint\fP *\fBx\fP, \fBint\fP *\fBy\fP)"
.br
.RI "\fIRetrieve the current state of the mouse\&. \fP"
.ti -1c
.RI "\fBDECLSPEC\fP \fBUint32\fP \fBSDLCALL\fP \fBSDL_GetGlobalMouseState\fP (\fBint\fP *\fBx\fP, \fBint\fP *\fBy\fP)"
.br
.RI "\fIGet the current state of the mouse, in relation to the desktop\&. \fP"
.ti -1c
.RI "\fBDECLSPEC\fP \fBUint32\fP \fBSDLCALL\fP \fBSDL_GetRelativeMouseState\fP (\fBint\fP *\fBx\fP, \fBint\fP *\fBy\fP)"
.br
.RI "\fIRetrieve the relative state of the mouse\&. \fP"
.ti -1c
.RI "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP \fBSDL_WarpMouseInWindow\fP (\fBSDL_Window\fP *window, \fBint\fP \fBx\fP, \fBint\fP \fBy\fP)"
.br
.RI "\fIMoves the mouse to the given position within the window\&. \fP"
.ti -1c
.RI "\fBDECLSPEC\fP \fBint\fP \fBSDLCALL\fP \fBSDL_WarpMouseGlobal\fP (\fBint\fP \fBx\fP, \fBint\fP \fBy\fP)"
.br
.RI "\fIMoves the mouse to the given position in global screen space\&. \fP"
.ti -1c
.RI "\fBDECLSPEC\fP \fBint\fP \fBSDLCALL\fP \fBSDL_SetRelativeMouseMode\fP (\fBSDL_bool\fP \fBenabled\fP)"
.br
.RI "\fISet relative mouse mode\&. \fP"
.ti -1c
.RI "\fBDECLSPEC\fP \fBint\fP \fBSDLCALL\fP \fBSDL_CaptureMouse\fP (\fBSDL_bool\fP \fBenabled\fP)"
.br
.RI "\fICapture the mouse, to track input outside an SDL window\&. \fP"
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_bool\fP \fBSDLCALL\fP \fBSDL_GetRelativeMouseMode\fP (\fBvoid\fP)"
.br
.RI "\fIQuery whether relative mouse mode is enabled\&. \fP"
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Cursor\fP *\fBSDLCALL\fP \fBSDL_CreateCursor\fP (\fBconst\fP \fBUint8\fP *\fBdata\fP, \fBconst\fP \fBUint8\fP *\fBmask\fP, \fBint\fP \fBw\fP, \fBint\fP \fBh\fP, \fBint\fP hot_x, \fBint\fP hot_y)"
.br
.RI "\fICreate a cursor, using the specified bitmap data and mask (in MSB format)\&. \fP"
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Cursor\fP *\fBSDLCALL\fP \fBSDL_CreateColorCursor\fP (\fBSDL_Surface\fP *surface, \fBint\fP hot_x, \fBint\fP hot_y)"
.br
.RI "\fICreate a color cursor\&. \fP"
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Cursor\fP *\fBSDLCALL\fP \fBSDL_CreateSystemCursor\fP (\fBSDL_SystemCursor\fP \fBid\fP)"
.br
.RI "\fICreate a system cursor\&. \fP"
.ti -1c
.RI "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP \fBSDL_SetCursor\fP (\fBSDL_Cursor\fP *cursor)"
.br
.RI "\fISet the active cursor\&. \fP"
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Cursor\fP *\fBSDLCALL\fP \fBSDL_GetCursor\fP (\fBvoid\fP)"
.br
.RI "\fIReturn the active cursor\&. \fP"
.ti -1c
.RI "\fBDECLSPEC\fP \fBSDL_Cursor\fP *\fBSDLCALL\fP \fBSDL_GetDefaultCursor\fP (\fBvoid\fP)"
.br
.RI "\fIReturn the default cursor\&. \fP"
.ti -1c
.RI "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP \fBSDL_FreeCursor\fP (\fBSDL_Cursor\fP *cursor)"
.br
.RI "\fIFrees a cursor created with \fBSDL_CreateCursor()\fP\&. \fP"
.ti -1c
.RI "\fBDECLSPEC\fP \fBint\fP \fBSDLCALL\fP \fBSDL_ShowCursor\fP (\fBint\fP toggle)"
.br
.RI "\fIToggle whether or not the cursor is shown\&. \fP"
.in -1c
.SH "Description détaillée"
.PP 
Include file for SDL mouse event handling\&. 
.PP
Définition dans le fichier \fBSDL_mouse\&.h\fP\&.
.SH "Documentation des macros"
.PP 
.SS "#define SDL_BUTTON(X)   (1 << ((X)\-1))"
Used as a mask when testing buttons in buttonstate\&.
.IP "\(bu" 2
Button 1: Left mouse button
.IP "\(bu" 2
Button 2: Middle mouse button
.IP "\(bu" 2
Button 3: Right mouse button 
.PP

.PP
Définition à la ligne 279 du fichier SDL_mouse\&.h\&.
.SS "#define SDL_BUTTON_LEFT   1"

.PP
Définition à la ligne 280 du fichier SDL_mouse\&.h\&.
.SS "#define SDL_BUTTON_LMASK   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_LEFT\fP)"

.PP
Définition à la ligne 285 du fichier SDL_mouse\&.h\&.
.SS "#define SDL_BUTTON_MIDDLE   2"

.PP
Définition à la ligne 281 du fichier SDL_mouse\&.h\&.
.SS "#define SDL_BUTTON_MMASK   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_MIDDLE\fP)"

.PP
Définition à la ligne 286 du fichier SDL_mouse\&.h\&.
.SS "#define SDL_BUTTON_RIGHT   3"

.PP
Définition à la ligne 282 du fichier SDL_mouse\&.h\&.
.SS "#define SDL_BUTTON_RMASK   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_RIGHT\fP)"

.PP
Définition à la ligne 287 du fichier SDL_mouse\&.h\&.
.SS "#define SDL_BUTTON_X1   4"

.PP
Définition à la ligne 283 du fichier SDL_mouse\&.h\&.
.SS "#define SDL_BUTTON_X1MASK   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_X1\fP)"

.PP
Définition à la ligne 288 du fichier SDL_mouse\&.h\&.
.SS "#define SDL_BUTTON_X2   5"

.PP
Définition à la ligne 284 du fichier SDL_mouse\&.h\&.
.SS "#define SDL_BUTTON_X2MASK   \fBSDL_BUTTON\fP(\fBSDL_BUTTON_X2\fP)"

.PP
Définition à la ligne 289 du fichier SDL_mouse\&.h\&.
.SH "Documentation des définitions de type"
.PP 
.SS "typedef struct \fBSDL_Cursor\fP \fBSDL_Cursor\fP"

.PP
Définition à la ligne 41 du fichier SDL_mouse\&.h\&.
.SH "Documentation du type de l'énumération"
.PP 
.SS "enum \fBSDL_MouseWheelDirection\fP"

.PP
Scroll direction types for the Scroll event\&. 
.PP
\fBValeurs énumérées\fP
.in +1c
.TP
\fB\fISDL_MOUSEWHEEL_NORMAL \fP\fP
The scroll direction is normal 
.TP
\fB\fISDL_MOUSEWHEEL_FLIPPED \fP\fP
The scroll direction is flipped / natural 
.PP
Définition à la ligne 66 du fichier SDL_mouse\&.h\&.
.SS "enum \fBSDL_SystemCursor\fP"

.PP
Cursor types for SDL_CreateSystemCursor\&. 
.PP
\fBValeurs énumérées\fP
.in +1c
.TP
\fB\fISDL_SYSTEM_CURSOR_ARROW \fP\fP
Arrow 
.TP
\fB\fISDL_SYSTEM_CURSOR_IBEAM \fP\fP
I-beam 
.TP
\fB\fISDL_SYSTEM_CURSOR_WAIT \fP\fP
Wait 
.TP
\fB\fISDL_SYSTEM_CURSOR_CROSSHAIR \fP\fP
Crosshair 
.TP
\fB\fISDL_SYSTEM_CURSOR_WAITARROW \fP\fP
Small wait cursor (or Wait if not available) 
.TP
\fB\fISDL_SYSTEM_CURSOR_SIZENWSE \fP\fP
Double arrow pointing northwest and southeast 
.TP
\fB\fISDL_SYSTEM_CURSOR_SIZENESW \fP\fP
Double arrow pointing northeast and southwest 
.TP
\fB\fISDL_SYSTEM_CURSOR_SIZEWE \fP\fP
Double arrow pointing west and east 
.TP
\fB\fISDL_SYSTEM_CURSOR_SIZENS \fP\fP
Double arrow pointing north and south 
.TP
\fB\fISDL_SYSTEM_CURSOR_SIZEALL \fP\fP
Four pointed arrow pointing north, south, east, and west 
.TP
\fB\fISDL_SYSTEM_CURSOR_NO \fP\fP
Slashed circle or crossbones 
.TP
\fB\fISDL_SYSTEM_CURSOR_HAND \fP\fP
Hand 
.TP
\fB\fISDL_NUM_SYSTEM_CURSORS \fP\fP
.PP
Définition à la ligne 46 du fichier SDL_mouse\&.h\&.
.SH "Documentation des fonctions"
.PP 
.SS "\fBDECLSPEC\fP \fBint\fP \fBSDLCALL\fP SDL_CaptureMouse (\fBSDL_bool\fP enabled)"

.PP
Capture the mouse, to track input outside an SDL window\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIenabled\fP Whether or not to enable capturing
.RE
.PP
Capturing enables your app to obtain mouse events globally, instead of just within your window\&. Not all video targets support this function\&. When capturing is enabled, the current window will get all mouse events, but unlike relative mode, no change is made to the cursor and it is not restrained to your window\&.
.PP
This function may also deny mouse input to other windows--both those in your application and others on the system--so you should use this function sparingly, and in small bursts\&. For example, you might want to track the mouse while the user is dragging something, until the user releases a mouse button\&. It is not recommended that you capture the mouse for long periods of time, such as the entire time your app is running\&.
.PP
While captured, mouse events still report coordinates relative to the current (foreground) window, but those coordinates may be outside the bounds of the window (including negative values)\&. Capturing is only allowed for the foreground window\&. If the window loses focus while capturing, the capture will be disabled automatically\&.
.PP
While capturing is enabled, the current window will have the SDL_WINDOW_MOUSE_CAPTURE flag set\&.
.PP
\fBRenvoie:\fP
.RS 4
0 on success, or -1 if not supported\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Cursor\fP* \fBSDLCALL\fP SDL_CreateColorCursor (\fBSDL_Surface\fP * surface, \fBint\fP hot_x, \fBint\fP hot_y)"

.PP
Create a color cursor\&. 
.PP
\fBVoir également:\fP
.RS 4
\fBSDL_FreeCursor()\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Cursor\fP* \fBSDLCALL\fP SDL_CreateCursor (\fBconst\fP \fBUint8\fP * data, \fBconst\fP \fBUint8\fP * mask, \fBint\fP w, \fBint\fP h, \fBint\fP hot_x, \fBint\fP hot_y)"

.PP
Create a cursor, using the specified bitmap data and mask (in MSB format)\&. The cursor width must be a multiple of 8 bits\&.
.PP
The cursor is created in black and white according to the following: data mask resulting pixel on screen  0 1 White  1 1 Black  0 0 Transparent  1 0 Inverted color if possible, black if not\&.  
.PP
\fBVoir également:\fP
.RS 4
\fBSDL_FreeCursor()\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Cursor\fP* \fBSDLCALL\fP SDL_CreateSystemCursor (\fBSDL_SystemCursor\fP id)"

.PP
Create a system cursor\&. 
.PP
\fBVoir également:\fP
.RS 4
\fBSDL_FreeCursor()\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP SDL_FreeCursor (\fBSDL_Cursor\fP * cursor)"

.PP
Frees a cursor created with \fBSDL_CreateCursor()\fP\&. 
.PP
\fBVoir également:\fP
.RS 4
\fBSDL_CreateCursor()\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Cursor\fP* \fBSDLCALL\fP SDL_GetCursor (\fBvoid\fP)"

.PP
Return the active cursor\&. 
.SS "\fBDECLSPEC\fP \fBSDL_Cursor\fP* \fBSDLCALL\fP SDL_GetDefaultCursor (\fBvoid\fP)"

.PP
Return the default cursor\&. 
.SS "\fBDECLSPEC\fP \fBUint32\fP \fBSDLCALL\fP SDL_GetGlobalMouseState (\fBint\fP * x, \fBint\fP * y)"

.PP
Get the current state of the mouse, in relation to the desktop\&. This works just like \fBSDL_GetMouseState()\fP, but the coordinates will be reported relative to the top-left of the desktop\&. This can be useful if you need to track the mouse outside of a specific window and \fBSDL_CaptureMouse()\fP doesn't fit your needs\&. For example, it could be useful if you need to track the mouse while dragging a window, where coordinates relative to a window might not be in sync at all times\&.
.PP
\fBNote:\fP
.RS 4
\fBSDL_GetMouseState()\fP returns the mouse position as SDL understands it from the last pump of the event queue\&. This function, however, queries the OS for the current mouse position, and as such, might be a slightly less efficient function\&. Unless you know what you're doing and have a good reason to use this function, you probably want \fBSDL_GetMouseState()\fP instead\&.
.RE
.PP
\fBParamètres:\fP
.RS 4
\fIx\fP Returns the current X coord, relative to the desktop\&. Can be NULL\&. 
.br
\fIy\fP Returns the current Y coord, relative to the desktop\&. Can be NULL\&. 
.RE
.PP
\fBRenvoie:\fP
.RS 4
The current button state as a bitmask, which can be tested using the \fBSDL_BUTTON(X)\fP macros\&.
.RE
.PP
\fBVoir également:\fP
.RS 4
\fBSDL_GetMouseState\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBSDL_Window\fP* \fBSDLCALL\fP SDL_GetMouseFocus (\fBvoid\fP)"

.PP
Get the window which currently has mouse focus\&. 
.SS "\fBDECLSPEC\fP \fBUint32\fP \fBSDLCALL\fP SDL_GetMouseState (\fBint\fP * x, \fBint\fP * y)"

.PP
Retrieve the current state of the mouse\&. The current button state is returned as a button bitmask, which can be tested using the \fBSDL_BUTTON(X)\fP macros, and x and y are set to the mouse cursor position relative to the focus window for the currently selected mouse\&. You can pass NULL for either x or y\&. 
.SS "\fBDECLSPEC\fP \fBSDL_bool\fP \fBSDLCALL\fP SDL_GetRelativeMouseMode (\fBvoid\fP)"

.PP
Query whether relative mouse mode is enabled\&. 
.PP
\fBVoir également:\fP
.RS 4
\fBSDL_SetRelativeMouseMode()\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBUint32\fP \fBSDLCALL\fP SDL_GetRelativeMouseState (\fBint\fP * x, \fBint\fP * y)"

.PP
Retrieve the relative state of the mouse\&. The current button state is returned as a button bitmask, which can be tested using the \fBSDL_BUTTON(X)\fP macros, and x and y are set to the mouse deltas since the last call to \fBSDL_GetRelativeMouseState()\fP\&. 
.SS "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP SDL_SetCursor (\fBSDL_Cursor\fP * cursor)"

.PP
Set the active cursor\&. 
.SS "\fBDECLSPEC\fP \fBint\fP \fBSDLCALL\fP SDL_SetRelativeMouseMode (\fBSDL_bool\fP enabled)"

.PP
Set relative mouse mode\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIenabled\fP Whether or not to enable relative mode
.RE
.PP
\fBRenvoie:\fP
.RS 4
0 on success, or -1 if relative mode is not supported\&.
.RE
.PP
While the mouse is in relative mode, the cursor is hidden, and the driver will try to report continuous motion in the current window\&. Only relative motion events will be delivered, the mouse position will not change\&.
.PP
\fBNote:\fP
.RS 4
This function will flush any pending mouse motion\&.
.RE
.PP
\fBVoir également:\fP
.RS 4
\fBSDL_GetRelativeMouseMode()\fP 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBint\fP \fBSDLCALL\fP SDL_ShowCursor (\fBint\fP toggle)"

.PP
Toggle whether or not the cursor is shown\&. 
.PP
\fBParamètres:\fP
.RS 4
\fItoggle\fP 1 to show the cursor, 0 to hide it, -1 to query the current state\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
1 if the cursor is shown, or 0 if the cursor is hidden\&. 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBint\fP \fBSDLCALL\fP SDL_WarpMouseGlobal (\fBint\fP x, \fBint\fP y)"

.PP
Moves the mouse to the given position in global screen space\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIx\fP The x coordinate 
.br
\fIy\fP The y coordinate 
.RE
.PP
\fBRenvoie:\fP
.RS 4
0 on success, -1 on error (usually: unsupported by a platform)\&.
.RE
.PP
\fBNote:\fP
.RS 4
This function generates a mouse motion event 
.RE
.PP

.SS "\fBDECLSPEC\fP \fBvoid\fP \fBSDLCALL\fP SDL_WarpMouseInWindow (\fBSDL_Window\fP * window, \fBint\fP x, \fBint\fP y)"

.PP
Moves the mouse to the given position within the window\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIwindow\fP The window to move the mouse into, or NULL for the current mouse focus 
.br
\fIx\fP The x coordinate within the window 
.br
\fIy\fP The y coordinate within the window
.RE
.PP
\fBNote:\fP
.RS 4
This function generates a mouse motion event 
.RE
.PP

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour Arcade à partir du code source\&.
